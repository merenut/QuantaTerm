name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.80

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install system dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            libfreetype6-dev \
            libharfbuzz-dev \
            pkg-config

      - name: Check workspace
        run: cargo check --workspace --locked

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.80
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.80
          components: clippy

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install system dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            libfreetype6-dev \
            libharfbuzz-dev \
            pkg-config

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --locked -- -D warnings

  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [1.80, stable]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest  
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            libfreetype6-dev \
            libharfbuzz-dev \
            pkg-config

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install harfbuzz freetype pkg-config

      - name: Run tests
        run: cargo test --workspace --locked

      - name: Run doc tests
        run: cargo test --workspace --doc --locked

  build-cross-platform:
    name: Build Cross Platform
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            cross: false
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.80
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.cross
        run: cargo install cross --locked

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfontconfig1-dev \
            libfreetype6-dev \
            libharfbuzz-dev \
            pkg-config

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install harfbuzz freetype pkg-config

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.target }}

      - name: Build workspace (native)
        if: "!matrix.cross"
        run: cargo build --workspace --locked --target ${{ matrix.target }}

      - name: Build workspace (cross)
        if: matrix.cross
        run: cross build --workspace --locked --target ${{ matrix.target }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run security audit
        run: cargo audit

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build documentation
        run: cargo doc --workspace --no-deps --locked

      - name: Upload documentation
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: target/doc/

  workspace-check:
    name: Workspace Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Validate Cargo.lock is up to date
        run: |
          cargo update --locked --dry-run 2>&1 | tee /tmp/cargo-update.log
          if grep -q "not updated" /tmp/cargo-update.log; then
            echo "::error::Cargo.lock is not up to date. Run 'cargo update' and commit the changes."
            exit 1
          fi

      - name: Check workspace dependencies
        run: cargo tree --duplicates

  msrv:
    name: MSRV (1.80)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust MSRV
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.80"

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Check MSRV compatibility
        run: cargo check --workspace --locked